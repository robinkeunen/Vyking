Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    DEFUN
    WHILE
    DEC
    NEQ
    GEQ
    STRING
    AND
    FLOAT
    LEQ
    NOT
    OR
    INC

Grammar

Rule 0     S' -> vyking_input
Rule 1     empty -> <empty>
Rule 2     vyking_input -> statement_sequence ENDMARKER
Rule 3     statement_sequence -> statement statement_sequence
Rule 4     statement_sequence -> statement
Rule 5     statement -> simple_statement
Rule 6     statement -> compound_statement
Rule 7     simple_statement -> assignment NEWLINE
Rule 8     simple_statement -> return_statement NEWLINE
Rule 9     simple_statement -> funcall NEWLINE
Rule 10    compound_statement -> if_statement
Rule 11    assignment -> ID ASSIGN expression
Rule 12    return_statement -> RETURN expression
Rule 13    if_statement -> IF test COLON suite if_closure
Rule 14    if_closure -> elif_statement
Rule 15    if_closure -> ELSE COLON suite
Rule 16    if_closure -> empty
Rule 17    elif_statement -> ELIF test COLON suite if_closure
Rule 18    suite -> simple_statement
Rule 19    suite -> NEWLINE INDENT statement_sequence DEDENT
Rule 20    test -> expression EQ expression
Rule 21    test -> expression LT expression
Rule 22    test -> expression GT expression
Rule 23    test -> expression
Rule 24    expression -> expression PLUS expression
Rule 25    expression -> expression MINUS expression
Rule 26    expression -> expression TIMES expression
Rule 27    expression -> expression DIVIDE expression
Rule 28    expression -> MINUS expression
Rule 29    expression -> LPAREN expression RPAREN
Rule 30    expression -> INT
Rule 31    expression -> ID
Rule 32    expression -> funcall
Rule 33    funcall -> ID LPAREN args RPAREN
Rule 34    funcall -> ID LPAREN RPAREN
Rule 35    args -> args COMMA test
Rule 36    args -> test

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 11
COLON                : 13 15 17
COMMA                : 35
DEC                  : 
DEDENT               : 19
DEFUN                : 
DIVIDE               : 27
ELIF                 : 17
ELSE                 : 15
ENDMARKER            : 2
EQ                   : 20
FLOAT                : 
GEQ                  : 
GT                   : 22
ID                   : 11 31 33 34
IF                   : 13
INC                  : 
INDENT               : 19
INT                  : 30
LEQ                  : 
LPAREN               : 29 33 34
LT                   : 21
MINUS                : 25 28
NEQ                  : 
NEWLINE              : 7 8 9 19
NOT                  : 
OR                   : 
PLUS                 : 24
RETURN               : 12
RPAREN               : 29 33 34
STRING               : 
TIMES                : 26
WHILE                : 
error                : 

Nonterminals, with rules where they appear

args                 : 33 35
assignment           : 7
compound_statement   : 6
elif_statement       : 14
empty                : 16
expression           : 11 12 20 20 21 21 22 22 23 24 24 25 25 26 26 27 27 28 29
funcall              : 9 32
if_closure           : 13 17
if_statement         : 10
return_statement     : 8
simple_statement     : 5 18
statement            : 3 4
statement_sequence   : 2 3 19
suite                : 13 15 17
test                 : 13 17 35 36
vyking_input         : 0

Parsing method: LALR

state 0

    (0) S' -> . vyking_input
    (2) vyking_input -> . statement_sequence ENDMARKER
    (3) statement_sequence -> . statement statement_sequence
    (4) statement_sequence -> . statement
    (5) statement -> . simple_statement
    (6) statement -> . compound_statement
    (7) simple_statement -> . assignment NEWLINE
    (8) simple_statement -> . return_statement NEWLINE
    (9) simple_statement -> . funcall NEWLINE
    (10) compound_statement -> . if_statement
    (11) assignment -> . ID ASSIGN expression
    (12) return_statement -> . RETURN expression
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN
    (13) if_statement -> . IF test COLON suite if_closure

    ID              shift and go to state 11
    RETURN          shift and go to state 5
    IF              shift and go to state 12

    funcall                        shift and go to state 4
    compound_statement             shift and go to state 6
    assignment                     shift and go to state 10
    vyking_input                   shift and go to state 1
    simple_statement               shift and go to state 2
    statement_sequence             shift and go to state 3
    return_statement               shift and go to state 7
    statement                      shift and go to state 8
    if_statement                   shift and go to state 9

state 1

    (0) S' -> vyking_input .



state 2

    (5) statement -> simple_statement .

    ID              reduce using rule 5 (statement -> simple_statement .)
    RETURN          reduce using rule 5 (statement -> simple_statement .)
    IF              reduce using rule 5 (statement -> simple_statement .)
    ENDMARKER       reduce using rule 5 (statement -> simple_statement .)
    DEDENT          reduce using rule 5 (statement -> simple_statement .)


state 3

    (2) vyking_input -> statement_sequence . ENDMARKER

    ENDMARKER       shift and go to state 13


state 4

    (9) simple_statement -> funcall . NEWLINE

    NEWLINE         shift and go to state 14


state 5

    (12) return_statement -> RETURN . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 19

state 6

    (6) statement -> compound_statement .

    ID              reduce using rule 6 (statement -> compound_statement .)
    RETURN          reduce using rule 6 (statement -> compound_statement .)
    IF              reduce using rule 6 (statement -> compound_statement .)
    ENDMARKER       reduce using rule 6 (statement -> compound_statement .)
    DEDENT          reduce using rule 6 (statement -> compound_statement .)


state 7

    (8) simple_statement -> return_statement . NEWLINE

    NEWLINE         shift and go to state 21


state 8

    (3) statement_sequence -> statement . statement_sequence
    (4) statement_sequence -> statement .
    (3) statement_sequence -> . statement statement_sequence
    (4) statement_sequence -> . statement
    (5) statement -> . simple_statement
    (6) statement -> . compound_statement
    (7) simple_statement -> . assignment NEWLINE
    (8) simple_statement -> . return_statement NEWLINE
    (9) simple_statement -> . funcall NEWLINE
    (10) compound_statement -> . if_statement
    (11) assignment -> . ID ASSIGN expression
    (12) return_statement -> . RETURN expression
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN
    (13) if_statement -> . IF test COLON suite if_closure

    ENDMARKER       reduce using rule 4 (statement_sequence -> statement .)
    DEDENT          reduce using rule 4 (statement_sequence -> statement .)
    ID              shift and go to state 11
    RETURN          shift and go to state 5
    IF              shift and go to state 12

    funcall                        shift and go to state 4
    compound_statement             shift and go to state 6
    assignment                     shift and go to state 10
    simple_statement               shift and go to state 2
    statement_sequence             shift and go to state 22
    return_statement               shift and go to state 7
    statement                      shift and go to state 8
    if_statement                   shift and go to state 9

state 9

    (10) compound_statement -> if_statement .

    ID              reduce using rule 10 (compound_statement -> if_statement .)
    RETURN          reduce using rule 10 (compound_statement -> if_statement .)
    IF              reduce using rule 10 (compound_statement -> if_statement .)
    DEDENT          reduce using rule 10 (compound_statement -> if_statement .)
    ENDMARKER       reduce using rule 10 (compound_statement -> if_statement .)


state 10

    (7) simple_statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 23


state 11

    (11) assignment -> ID . ASSIGN expression
    (33) funcall -> ID . LPAREN args RPAREN
    (34) funcall -> ID . LPAREN RPAREN

    ASSIGN          shift and go to state 24
    LPAREN          shift and go to state 25


state 12

    (13) if_statement -> IF . test COLON suite if_closure
    (20) test -> . expression EQ expression
    (21) test -> . expression LT expression
    (22) test -> . expression GT expression
    (23) test -> . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    test                           shift and go to state 26
    expression                     shift and go to state 27

state 13

    (2) vyking_input -> statement_sequence ENDMARKER .

    $end            reduce using rule 2 (vyking_input -> statement_sequence ENDMARKER .)


state 14

    (9) simple_statement -> funcall NEWLINE .

    ID              reduce using rule 9 (simple_statement -> funcall NEWLINE .)
    RETURN          reduce using rule 9 (simple_statement -> funcall NEWLINE .)
    IF              reduce using rule 9 (simple_statement -> funcall NEWLINE .)
    DEDENT          reduce using rule 9 (simple_statement -> funcall NEWLINE .)
    ELSE            reduce using rule 9 (simple_statement -> funcall NEWLINE .)
    ELIF            reduce using rule 9 (simple_statement -> funcall NEWLINE .)
    ENDMARKER       reduce using rule 9 (simple_statement -> funcall NEWLINE .)


state 15

    (30) expression -> INT .

    PLUS            reduce using rule 30 (expression -> INT .)
    MINUS           reduce using rule 30 (expression -> INT .)
    TIMES           reduce using rule 30 (expression -> INT .)
    DIVIDE          reduce using rule 30 (expression -> INT .)
    NEWLINE         reduce using rule 30 (expression -> INT .)
    EQ              reduce using rule 30 (expression -> INT .)
    LT              reduce using rule 30 (expression -> INT .)
    GT              reduce using rule 30 (expression -> INT .)
    COLON           reduce using rule 30 (expression -> INT .)
    RPAREN          reduce using rule 30 (expression -> INT .)
    COMMA           reduce using rule 30 (expression -> INT .)


state 16

    (32) expression -> funcall .

    PLUS            reduce using rule 32 (expression -> funcall .)
    MINUS           reduce using rule 32 (expression -> funcall .)
    TIMES           reduce using rule 32 (expression -> funcall .)
    DIVIDE          reduce using rule 32 (expression -> funcall .)
    NEWLINE         reduce using rule 32 (expression -> funcall .)
    EQ              reduce using rule 32 (expression -> funcall .)
    LT              reduce using rule 32 (expression -> funcall .)
    GT              reduce using rule 32 (expression -> funcall .)
    COLON           reduce using rule 32 (expression -> funcall .)
    RPAREN          reduce using rule 32 (expression -> funcall .)
    COMMA           reduce using rule 32 (expression -> funcall .)


state 17

    (29) expression -> LPAREN . expression RPAREN
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 28

state 18

    (31) expression -> ID .
    (33) funcall -> ID . LPAREN args RPAREN
    (34) funcall -> ID . LPAREN RPAREN

    PLUS            reduce using rule 31 (expression -> ID .)
    MINUS           reduce using rule 31 (expression -> ID .)
    TIMES           reduce using rule 31 (expression -> ID .)
    DIVIDE          reduce using rule 31 (expression -> ID .)
    NEWLINE         reduce using rule 31 (expression -> ID .)
    EQ              reduce using rule 31 (expression -> ID .)
    LT              reduce using rule 31 (expression -> ID .)
    GT              reduce using rule 31 (expression -> ID .)
    COLON           reduce using rule 31 (expression -> ID .)
    RPAREN          reduce using rule 31 (expression -> ID .)
    COMMA           reduce using rule 31 (expression -> ID .)
    LPAREN          shift and go to state 25


state 19

    (12) return_statement -> RETURN expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 12 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29


state 20

    (28) expression -> MINUS . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 33

state 21

    (8) simple_statement -> return_statement NEWLINE .

    ID              reduce using rule 8 (simple_statement -> return_statement NEWLINE .)
    RETURN          reduce using rule 8 (simple_statement -> return_statement NEWLINE .)
    IF              reduce using rule 8 (simple_statement -> return_statement NEWLINE .)
    DEDENT          reduce using rule 8 (simple_statement -> return_statement NEWLINE .)
    ELSE            reduce using rule 8 (simple_statement -> return_statement NEWLINE .)
    ELIF            reduce using rule 8 (simple_statement -> return_statement NEWLINE .)
    ENDMARKER       reduce using rule 8 (simple_statement -> return_statement NEWLINE .)


state 22

    (3) statement_sequence -> statement statement_sequence .

    ENDMARKER       reduce using rule 3 (statement_sequence -> statement statement_sequence .)
    DEDENT          reduce using rule 3 (statement_sequence -> statement statement_sequence .)


state 23

    (7) simple_statement -> assignment NEWLINE .

    ID              reduce using rule 7 (simple_statement -> assignment NEWLINE .)
    RETURN          reduce using rule 7 (simple_statement -> assignment NEWLINE .)
    IF              reduce using rule 7 (simple_statement -> assignment NEWLINE .)
    DEDENT          reduce using rule 7 (simple_statement -> assignment NEWLINE .)
    ELSE            reduce using rule 7 (simple_statement -> assignment NEWLINE .)
    ELIF            reduce using rule 7 (simple_statement -> assignment NEWLINE .)
    ENDMARKER       reduce using rule 7 (simple_statement -> assignment NEWLINE .)


state 24

    (11) assignment -> ID ASSIGN . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 34

state 25

    (33) funcall -> ID LPAREN . args RPAREN
    (34) funcall -> ID LPAREN . RPAREN
    (35) args -> . args COMMA test
    (36) args -> . test
    (20) test -> . expression EQ expression
    (21) test -> . expression LT expression
    (22) test -> . expression GT expression
    (23) test -> . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 35
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    test                           shift and go to state 37
    funcall                        shift and go to state 16
    args                           shift and go to state 36
    expression                     shift and go to state 27

state 26

    (13) if_statement -> IF test . COLON suite if_closure

    COLON           shift and go to state 38


state 27

    (20) test -> expression . EQ expression
    (21) test -> expression . LT expression
    (22) test -> expression . GT expression
    (23) test -> expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    EQ              shift and go to state 41
    LT              shift and go to state 40
    GT              shift and go to state 39
    COLON           reduce using rule 23 (test -> expression .)
    RPAREN          reduce using rule 23 (test -> expression .)
    COMMA           reduce using rule 23 (test -> expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29


state 28

    (29) expression -> LPAREN expression . RPAREN
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 42
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29


state 29

    (27) expression -> expression DIVIDE . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 43

state 30

    (26) expression -> expression TIMES . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 44

state 31

    (24) expression -> expression PLUS . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 45

state 32

    (25) expression -> expression MINUS . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 46

state 33

    (28) expression -> MINUS expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 28 (expression -> MINUS expression .)
    MINUS           reduce using rule 28 (expression -> MINUS expression .)
    TIMES           reduce using rule 28 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 28 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 28 (expression -> MINUS expression .)
    EQ              reduce using rule 28 (expression -> MINUS expression .)
    LT              reduce using rule 28 (expression -> MINUS expression .)
    GT              reduce using rule 28 (expression -> MINUS expression .)
    COLON           reduce using rule 28 (expression -> MINUS expression .)
    RPAREN          reduce using rule 28 (expression -> MINUS expression .)
    COMMA           reduce using rule 28 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 34

    (11) assignment -> ID ASSIGN expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 11 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29


state 35

    (34) funcall -> ID LPAREN RPAREN .

    EQ              reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    LT              reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    GT              reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    NEWLINE         reduce using rule 34 (funcall -> ID LPAREN RPAREN .)
    COLON           reduce using rule 34 (funcall -> ID LPAREN RPAREN .)


state 36

    (33) funcall -> ID LPAREN args . RPAREN
    (35) args -> args . COMMA test

    RPAREN          shift and go to state 47
    COMMA           shift and go to state 48


state 37

    (36) args -> test .

    RPAREN          reduce using rule 36 (args -> test .)
    COMMA           reduce using rule 36 (args -> test .)


state 38

    (13) if_statement -> IF test COLON . suite if_closure
    (18) suite -> . simple_statement
    (19) suite -> . NEWLINE INDENT statement_sequence DEDENT
    (7) simple_statement -> . assignment NEWLINE
    (8) simple_statement -> . return_statement NEWLINE
    (9) simple_statement -> . funcall NEWLINE
    (11) assignment -> . ID ASSIGN expression
    (12) return_statement -> . RETURN expression
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    NEWLINE         shift and go to state 49
    ID              shift and go to state 11
    RETURN          shift and go to state 5

    funcall                        shift and go to state 4
    assignment                     shift and go to state 10
    simple_statement               shift and go to state 50
    return_statement               shift and go to state 7
    suite                          shift and go to state 51

state 39

    (22) test -> expression GT . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 52

state 40

    (21) test -> expression LT . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 53

state 41

    (20) test -> expression EQ . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    expression                     shift and go to state 54

state 42

    (29) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 29 (expression -> LPAREN expression RPAREN .)


state 43

    (27) expression -> expression DIVIDE expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 27 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 27 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 27 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 27 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 27 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 27 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 27 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 27 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 27 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 27 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 27 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 44

    (26) expression -> expression TIMES expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 26 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 26 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 26 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 26 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 26 (expression -> expression TIMES expression .)
    EQ              reduce using rule 26 (expression -> expression TIMES expression .)
    LT              reduce using rule 26 (expression -> expression TIMES expression .)
    GT              reduce using rule 26 (expression -> expression TIMES expression .)
    COLON           reduce using rule 26 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 26 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 26 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 29 ]


state 45

    (24) expression -> expression PLUS expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 24 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 24 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 24 (expression -> expression PLUS expression .)
    EQ              reduce using rule 24 (expression -> expression PLUS expression .)
    LT              reduce using rule 24 (expression -> expression PLUS expression .)
    GT              reduce using rule 24 (expression -> expression PLUS expression .)
    COLON           reduce using rule 24 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 24 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 24 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29

  ! TIMES           [ reduce using rule 24 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]


state 46

    (25) expression -> expression MINUS expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 25 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 25 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 25 (expression -> expression MINUS expression .)
    EQ              reduce using rule 25 (expression -> expression MINUS expression .)
    LT              reduce using rule 25 (expression -> expression MINUS expression .)
    GT              reduce using rule 25 (expression -> expression MINUS expression .)
    COLON           reduce using rule 25 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 25 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 25 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29

  ! TIMES           [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]


state 47

    (33) funcall -> ID LPAREN args RPAREN .

    EQ              reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    LT              reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    GT              reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    NEWLINE         reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)
    COLON           reduce using rule 33 (funcall -> ID LPAREN args RPAREN .)


state 48

    (35) args -> args COMMA . test
    (20) test -> . expression EQ expression
    (21) test -> . expression LT expression
    (22) test -> . expression GT expression
    (23) test -> . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    test                           shift and go to state 55
    funcall                        shift and go to state 16
    expression                     shift and go to state 27

state 49

    (19) suite -> NEWLINE . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 56


state 50

    (18) suite -> simple_statement .

    ELSE            reduce using rule 18 (suite -> simple_statement .)
    ELIF            reduce using rule 18 (suite -> simple_statement .)
    ID              reduce using rule 18 (suite -> simple_statement .)
    RETURN          reduce using rule 18 (suite -> simple_statement .)
    IF              reduce using rule 18 (suite -> simple_statement .)
    ENDMARKER       reduce using rule 18 (suite -> simple_statement .)
    DEDENT          reduce using rule 18 (suite -> simple_statement .)


state 51

    (13) if_statement -> IF test COLON suite . if_closure
    (14) if_closure -> . elif_statement
    (15) if_closure -> . ELSE COLON suite
    (16) if_closure -> . empty
    (17) elif_statement -> . ELIF test COLON suite if_closure
    (1) empty -> .

    ELSE            shift and go to state 59
    ELIF            shift and go to state 57
    ID              reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ENDMARKER       reduce using rule 1 (empty -> .)
    DEDENT          reduce using rule 1 (empty -> .)

    elif_statement                 shift and go to state 58
    if_closure                     shift and go to state 60
    empty                          shift and go to state 61

state 52

    (22) test -> expression GT expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    COLON           reduce using rule 22 (test -> expression GT expression .)
    RPAREN          reduce using rule 22 (test -> expression GT expression .)
    COMMA           reduce using rule 22 (test -> expression GT expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29


state 53

    (21) test -> expression LT expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    COLON           reduce using rule 21 (test -> expression LT expression .)
    RPAREN          reduce using rule 21 (test -> expression LT expression .)
    COMMA           reduce using rule 21 (test -> expression LT expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29


state 54

    (20) test -> expression EQ expression .
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . TIMES expression
    (27) expression -> expression . DIVIDE expression

    COLON           reduce using rule 20 (test -> expression EQ expression .)
    RPAREN          reduce using rule 20 (test -> expression EQ expression .)
    COMMA           reduce using rule 20 (test -> expression EQ expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 29


state 55

    (35) args -> args COMMA test .

    RPAREN          reduce using rule 35 (args -> args COMMA test .)
    COMMA           reduce using rule 35 (args -> args COMMA test .)


state 56

    (19) suite -> NEWLINE INDENT . statement_sequence DEDENT
    (3) statement_sequence -> . statement statement_sequence
    (4) statement_sequence -> . statement
    (5) statement -> . simple_statement
    (6) statement -> . compound_statement
    (7) simple_statement -> . assignment NEWLINE
    (8) simple_statement -> . return_statement NEWLINE
    (9) simple_statement -> . funcall NEWLINE
    (10) compound_statement -> . if_statement
    (11) assignment -> . ID ASSIGN expression
    (12) return_statement -> . RETURN expression
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN
    (13) if_statement -> . IF test COLON suite if_closure

    ID              shift and go to state 11
    RETURN          shift and go to state 5
    IF              shift and go to state 12

    funcall                        shift and go to state 4
    compound_statement             shift and go to state 6
    assignment                     shift and go to state 10
    simple_statement               shift and go to state 2
    statement_sequence             shift and go to state 62
    return_statement               shift and go to state 7
    statement                      shift and go to state 8
    if_statement                   shift and go to state 9

state 57

    (17) elif_statement -> ELIF . test COLON suite if_closure
    (20) test -> . expression EQ expression
    (21) test -> . expression LT expression
    (22) test -> . expression GT expression
    (23) test -> . expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression TIMES expression
    (27) expression -> . expression DIVIDE expression
    (28) expression -> . MINUS expression
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . INT
    (31) expression -> . ID
    (32) expression -> . funcall
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 15
    ID              shift and go to state 18

    funcall                        shift and go to state 16
    test                           shift and go to state 63
    expression                     shift and go to state 27

state 58

    (14) if_closure -> elif_statement .

    ID              reduce using rule 14 (if_closure -> elif_statement .)
    RETURN          reduce using rule 14 (if_closure -> elif_statement .)
    IF              reduce using rule 14 (if_closure -> elif_statement .)
    ENDMARKER       reduce using rule 14 (if_closure -> elif_statement .)
    DEDENT          reduce using rule 14 (if_closure -> elif_statement .)


state 59

    (15) if_closure -> ELSE . COLON suite

    COLON           shift and go to state 64


state 60

    (13) if_statement -> IF test COLON suite if_closure .

    ID              reduce using rule 13 (if_statement -> IF test COLON suite if_closure .)
    RETURN          reduce using rule 13 (if_statement -> IF test COLON suite if_closure .)
    IF              reduce using rule 13 (if_statement -> IF test COLON suite if_closure .)
    ENDMARKER       reduce using rule 13 (if_statement -> IF test COLON suite if_closure .)
    DEDENT          reduce using rule 13 (if_statement -> IF test COLON suite if_closure .)


state 61

    (16) if_closure -> empty .

    ID              reduce using rule 16 (if_closure -> empty .)
    RETURN          reduce using rule 16 (if_closure -> empty .)
    IF              reduce using rule 16 (if_closure -> empty .)
    ENDMARKER       reduce using rule 16 (if_closure -> empty .)
    DEDENT          reduce using rule 16 (if_closure -> empty .)


state 62

    (19) suite -> NEWLINE INDENT statement_sequence . DEDENT

    DEDENT          shift and go to state 65


state 63

    (17) elif_statement -> ELIF test . COLON suite if_closure

    COLON           shift and go to state 66


state 64

    (15) if_closure -> ELSE COLON . suite
    (18) suite -> . simple_statement
    (19) suite -> . NEWLINE INDENT statement_sequence DEDENT
    (7) simple_statement -> . assignment NEWLINE
    (8) simple_statement -> . return_statement NEWLINE
    (9) simple_statement -> . funcall NEWLINE
    (11) assignment -> . ID ASSIGN expression
    (12) return_statement -> . RETURN expression
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    NEWLINE         shift and go to state 49
    ID              shift and go to state 11
    RETURN          shift and go to state 5

    funcall                        shift and go to state 4
    assignment                     shift and go to state 10
    simple_statement               shift and go to state 50
    return_statement               shift and go to state 7
    suite                          shift and go to state 67

state 65

    (19) suite -> NEWLINE INDENT statement_sequence DEDENT .

    ELSE            reduce using rule 19 (suite -> NEWLINE INDENT statement_sequence DEDENT .)
    ELIF            reduce using rule 19 (suite -> NEWLINE INDENT statement_sequence DEDENT .)
    ID              reduce using rule 19 (suite -> NEWLINE INDENT statement_sequence DEDENT .)
    RETURN          reduce using rule 19 (suite -> NEWLINE INDENT statement_sequence DEDENT .)
    IF              reduce using rule 19 (suite -> NEWLINE INDENT statement_sequence DEDENT .)
    ENDMARKER       reduce using rule 19 (suite -> NEWLINE INDENT statement_sequence DEDENT .)
    DEDENT          reduce using rule 19 (suite -> NEWLINE INDENT statement_sequence DEDENT .)


state 66

    (17) elif_statement -> ELIF test COLON . suite if_closure
    (18) suite -> . simple_statement
    (19) suite -> . NEWLINE INDENT statement_sequence DEDENT
    (7) simple_statement -> . assignment NEWLINE
    (8) simple_statement -> . return_statement NEWLINE
    (9) simple_statement -> . funcall NEWLINE
    (11) assignment -> . ID ASSIGN expression
    (12) return_statement -> . RETURN expression
    (33) funcall -> . ID LPAREN args RPAREN
    (34) funcall -> . ID LPAREN RPAREN

    NEWLINE         shift and go to state 49
    ID              shift and go to state 11
    RETURN          shift and go to state 5

    funcall                        shift and go to state 4
    assignment                     shift and go to state 10
    simple_statement               shift and go to state 50
    return_statement               shift and go to state 7
    suite                          shift and go to state 68

state 67

    (15) if_closure -> ELSE COLON suite .

    ID              reduce using rule 15 (if_closure -> ELSE COLON suite .)
    RETURN          reduce using rule 15 (if_closure -> ELSE COLON suite .)
    IF              reduce using rule 15 (if_closure -> ELSE COLON suite .)
    ENDMARKER       reduce using rule 15 (if_closure -> ELSE COLON suite .)
    DEDENT          reduce using rule 15 (if_closure -> ELSE COLON suite .)


state 68

    (17) elif_statement -> ELIF test COLON suite . if_closure
    (14) if_closure -> . elif_statement
    (15) if_closure -> . ELSE COLON suite
    (16) if_closure -> . empty
    (17) elif_statement -> . ELIF test COLON suite if_closure
    (1) empty -> .

    ELSE            shift and go to state 59
    ELIF            shift and go to state 57
    ID              reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ENDMARKER       reduce using rule 1 (empty -> .)
    DEDENT          reduce using rule 1 (empty -> .)

    elif_statement                 shift and go to state 58
    if_closure                     shift and go to state 69
    empty                          shift and go to state 61

state 69

    (17) elif_statement -> ELIF test COLON suite if_closure .

    ID              reduce using rule 17 (elif_statement -> ELIF test COLON suite if_closure .)
    RETURN          reduce using rule 17 (elif_statement -> ELIF test COLON suite if_closure .)
    IF              reduce using rule 17 (elif_statement -> ELIF test COLON suite if_closure .)
    ENDMARKER       reduce using rule 17 (elif_statement -> ELIF test COLON suite if_closure .)
    DEDENT          reduce using rule 17 (elif_statement -> ELIF test COLON suite if_closure .)

