Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    DEDENT
    LOWER
    RETURN
    ELIF
    WHILE
    DEC
    NEQ
    GEQ
    NEWLINE
    DEFUN
    COLON
    STRING
    ELSE
    EQ
    IF
    AND
    INDENT
    GREATER
    FLOAT
    LEQ
    NOT
    COMMA
    OR
    INC

Grammar

Rule 0     S' -> assignment
Rule 1     assignment -> ID ASSIGN expression
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> expression MINUS expression
Rule 4     expression -> expression TIMES expression
Rule 5     expression -> expression DIVIDE expression
Rule 6     expression -> MINUS expression
Rule 7     expression -> LPAREN expression RPAREN
Rule 8     expression -> INT
Rule 9     expression -> ID

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 1
COLON                : 
COMMA                : 
DEC                  : 
DEDENT               : 
DEFUN                : 
DIVIDE               : 5
ELIF                 : 
ELSE                 : 
EQ                   : 
FLOAT                : 
GEQ                  : 
GREATER              : 
ID                   : 1 9
IF                   : 
INC                  : 
INDENT               : 
INT                  : 8
LEQ                  : 
LOWER                : 
LPAREN               : 7
MINUS                : 3 6
NEQ                  : 
NEWLINE              : 
NOT                  : 
OR                   : 
PLUS                 : 2
RETURN               : 
RPAREN               : 7
STRING               : 
TIMES                : 4
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 0
expression           : 1 2 2 3 3 4 4 5 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . assignment
    (1) assignment -> . ID ASSIGN expression

    ID              shift and go to state 2

    assignment                     shift and go to state 1

state 1

    (0) S' -> assignment .



state 2

    (1) assignment -> ID . ASSIGN expression

    ASSIGN          shift and go to state 3


state 3

    (1) assignment -> ID ASSIGN . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . MINUS expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INT
    (9) expression -> . ID

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    ID              shift and go to state 8

    expression                     shift and go to state 7

state 4

    (8) expression -> INT .

    PLUS            reduce using rule 8 (expression -> INT .)
    MINUS           reduce using rule 8 (expression -> INT .)
    TIMES           reduce using rule 8 (expression -> INT .)
    DIVIDE          reduce using rule 8 (expression -> INT .)
    $end            reduce using rule 8 (expression -> INT .)
    RPAREN          reduce using rule 8 (expression -> INT .)


state 5

    (6) expression -> MINUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . MINUS expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INT
    (9) expression -> . ID

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    ID              shift and go to state 8

    expression                     shift and go to state 9

state 6

    (7) expression -> LPAREN . expression RPAREN
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . MINUS expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INT
    (9) expression -> . ID

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    ID              shift and go to state 8

    expression                     shift and go to state 10

state 7

    (1) assignment -> ID ASSIGN expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 11


state 8

    (9) expression -> ID .

    PLUS            reduce using rule 9 (expression -> ID .)
    MINUS           reduce using rule 9 (expression -> ID .)
    TIMES           reduce using rule 9 (expression -> ID .)
    DIVIDE          reduce using rule 9 (expression -> ID .)
    $end            reduce using rule 9 (expression -> ID .)
    RPAREN          reduce using rule 9 (expression -> ID .)


state 9

    (6) expression -> MINUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> MINUS expression .)
    MINUS           reduce using rule 6 (expression -> MINUS expression .)
    TIMES           reduce using rule 6 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 6 (expression -> MINUS expression .)
    $end            reduce using rule 6 (expression -> MINUS expression .)
    RPAREN          reduce using rule 6 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 10

    (7) expression -> LPAREN expression . RPAREN
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 15
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 11


state 11

    (5) expression -> expression DIVIDE . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . MINUS expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INT
    (9) expression -> . ID

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    ID              shift and go to state 8

    expression                     shift and go to state 16

state 12

    (4) expression -> expression TIMES . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . MINUS expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INT
    (9) expression -> . ID

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    ID              shift and go to state 8

    expression                     shift and go to state 17

state 13

    (2) expression -> expression PLUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . MINUS expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INT
    (9) expression -> . ID

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    ID              shift and go to state 8

    expression                     shift and go to state 18

state 14

    (3) expression -> expression MINUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . expression TIMES expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . MINUS expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INT
    (9) expression -> . ID

    MINUS           shift and go to state 5
    LPAREN          shift and go to state 6
    INT             shift and go to state 4
    ID              shift and go to state 8

    expression                     shift and go to state 19

state 15

    (7) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 7 (expression -> LPAREN expression RPAREN .)


state 16

    (5) expression -> expression DIVIDE expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 5 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 5 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 5 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 5 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 5 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 17

    (4) expression -> expression TIMES expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 4 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 4 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 4 (expression -> expression TIMES expression .)
    $end            reduce using rule 4 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 4 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 18

    (2) expression -> expression PLUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 2 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 2 (expression -> expression PLUS expression .)
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]


state 19

    (3) expression -> expression MINUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression
    (4) expression -> expression . TIMES expression
    (5) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 3 (expression -> expression MINUS expression .)
    $end            reduce using rule 3 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]

