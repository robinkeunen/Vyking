Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    LOWER
    ELIF
    WHILE
    DEC
    NEQ
    GEQ
    DEFUN
    STRING
    ELSE
    AND
    GREATER
    FLOAT
    LEQ
    NOT
    COMMA
    OR
    INC

Grammar

Rule 0     S' -> vyking_input
Rule 1     vyking_input -> statement_sequence ENDMARKER
Rule 2     statement_sequence -> statement statement_sequence
Rule 3     statement_sequence -> statement
Rule 4     statement -> simple_statement
Rule 5     statement -> compound_statement
Rule 6     simple_statement -> assignment NEWLINE
Rule 7     simple_statement -> return_statement NEWLINE
Rule 8     compound_statement -> if_statement NEWLINE
Rule 9     assignment -> ID ASSIGN expression
Rule 10    return_statement -> RETURN expression
Rule 11    if_statement -> IF test COLON suite
Rule 12    suite -> simple_statement
Rule 13    suite -> NEWLINE INDENT statement_sequence DEDENT
Rule 14    test -> expression EQ expression
Rule 15    expression -> expression PLUS expression
Rule 16    expression -> expression MINUS expression
Rule 17    expression -> expression TIMES expression
Rule 18    expression -> expression DIVIDE expression
Rule 19    expression -> MINUS expression
Rule 20    expression -> LPAREN expression RPAREN
Rule 21    expression -> INT
Rule 22    expression -> ID

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 9
COLON                : 11
COMMA                : 
DEC                  : 
DEDENT               : 13
DEFUN                : 
DIVIDE               : 18
ELIF                 : 
ELSE                 : 
ENDMARKER            : 1
EQ                   : 14
FLOAT                : 
GEQ                  : 
GREATER              : 
ID                   : 9 22
IF                   : 11
INC                  : 
INDENT               : 13
INT                  : 21
LEQ                  : 
LOWER                : 
LPAREN               : 20
MINUS                : 16 19
NEQ                  : 
NEWLINE              : 6 7 8 13
NOT                  : 
OR                   : 
PLUS                 : 15
RETURN               : 10
RPAREN               : 20
STRING               : 
TIMES                : 17
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 6
compound_statement   : 5
expression           : 9 10 14 14 15 15 16 16 17 17 18 18 19 20
if_statement         : 8
return_statement     : 7
simple_statement     : 4 12
statement            : 2 3
statement_sequence   : 1 2 13
suite                : 11
test                 : 11
vyking_input         : 0

Parsing method: LALR

state 0

    (0) S' -> . vyking_input
    (1) vyking_input -> . statement_sequence ENDMARKER
    (2) statement_sequence -> . statement statement_sequence
    (3) statement_sequence -> . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . assignment NEWLINE
    (7) simple_statement -> . return_statement NEWLINE
    (8) compound_statement -> . if_statement NEWLINE
    (9) assignment -> . ID ASSIGN expression
    (10) return_statement -> . RETURN expression
    (11) if_statement -> . IF test COLON suite

    ID              shift and go to state 10
    RETURN          shift and go to state 8
    IF              shift and go to state 11

    compound_statement             shift and go to state 1
    assignment                     shift and go to state 2
    vyking_input                   shift and go to state 3
    simple_statement               shift and go to state 4
    statement_sequence             shift and go to state 5
    return_statement               shift and go to state 6
    statement                      shift and go to state 7
    if_statement                   shift and go to state 9

state 1

    (5) statement -> compound_statement .

    ID              reduce using rule 5 (statement -> compound_statement .)
    RETURN          reduce using rule 5 (statement -> compound_statement .)
    IF              reduce using rule 5 (statement -> compound_statement .)
    ENDMARKER       reduce using rule 5 (statement -> compound_statement .)
    DEDENT          reduce using rule 5 (statement -> compound_statement .)


state 2

    (6) simple_statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 12


state 3

    (0) S' -> vyking_input .



state 4

    (4) statement -> simple_statement .

    ID              reduce using rule 4 (statement -> simple_statement .)
    RETURN          reduce using rule 4 (statement -> simple_statement .)
    IF              reduce using rule 4 (statement -> simple_statement .)
    ENDMARKER       reduce using rule 4 (statement -> simple_statement .)
    DEDENT          reduce using rule 4 (statement -> simple_statement .)


state 5

    (1) vyking_input -> statement_sequence . ENDMARKER

    ENDMARKER       shift and go to state 13


state 6

    (7) simple_statement -> return_statement . NEWLINE

    NEWLINE         shift and go to state 14


state 7

    (2) statement_sequence -> statement . statement_sequence
    (3) statement_sequence -> statement .
    (2) statement_sequence -> . statement statement_sequence
    (3) statement_sequence -> . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . assignment NEWLINE
    (7) simple_statement -> . return_statement NEWLINE
    (8) compound_statement -> . if_statement NEWLINE
    (9) assignment -> . ID ASSIGN expression
    (10) return_statement -> . RETURN expression
    (11) if_statement -> . IF test COLON suite

    DEDENT          reduce using rule 3 (statement_sequence -> statement .)
    ENDMARKER       reduce using rule 3 (statement_sequence -> statement .)
    ID              shift and go to state 10
    RETURN          shift and go to state 8
    IF              shift and go to state 11

    compound_statement             shift and go to state 1
    assignment                     shift and go to state 2
    simple_statement               shift and go to state 4
    statement_sequence             shift and go to state 15
    return_statement               shift and go to state 6
    statement                      shift and go to state 7
    if_statement                   shift and go to state 9

state 8

    (10) return_statement -> RETURN . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 19

state 9

    (8) compound_statement -> if_statement . NEWLINE

    NEWLINE         shift and go to state 21


state 10

    (9) assignment -> ID . ASSIGN expression

    ASSIGN          shift and go to state 22


state 11

    (11) if_statement -> IF . test COLON suite
    (14) test -> . expression EQ expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    test                           shift and go to state 24
    expression                     shift and go to state 23

state 12

    (6) simple_statement -> assignment NEWLINE .

    NEWLINE         reduce using rule 6 (simple_statement -> assignment NEWLINE .)
    ID              reduce using rule 6 (simple_statement -> assignment NEWLINE .)
    RETURN          reduce using rule 6 (simple_statement -> assignment NEWLINE .)
    IF              reduce using rule 6 (simple_statement -> assignment NEWLINE .)
    ENDMARKER       reduce using rule 6 (simple_statement -> assignment NEWLINE .)
    DEDENT          reduce using rule 6 (simple_statement -> assignment NEWLINE .)


state 13

    (1) vyking_input -> statement_sequence ENDMARKER .

    $end            reduce using rule 1 (vyking_input -> statement_sequence ENDMARKER .)


state 14

    (7) simple_statement -> return_statement NEWLINE .

    NEWLINE         reduce using rule 7 (simple_statement -> return_statement NEWLINE .)
    ID              reduce using rule 7 (simple_statement -> return_statement NEWLINE .)
    RETURN          reduce using rule 7 (simple_statement -> return_statement NEWLINE .)
    IF              reduce using rule 7 (simple_statement -> return_statement NEWLINE .)
    ENDMARKER       reduce using rule 7 (simple_statement -> return_statement NEWLINE .)
    DEDENT          reduce using rule 7 (simple_statement -> return_statement NEWLINE .)


state 15

    (2) statement_sequence -> statement statement_sequence .

    DEDENT          reduce using rule 2 (statement_sequence -> statement statement_sequence .)
    ENDMARKER       reduce using rule 2 (statement_sequence -> statement statement_sequence .)


state 16

    (21) expression -> INT .

    PLUS            reduce using rule 21 (expression -> INT .)
    MINUS           reduce using rule 21 (expression -> INT .)
    TIMES           reduce using rule 21 (expression -> INT .)
    DIVIDE          reduce using rule 21 (expression -> INT .)
    NEWLINE         reduce using rule 21 (expression -> INT .)
    EQ              reduce using rule 21 (expression -> INT .)
    RPAREN          reduce using rule 21 (expression -> INT .)
    COLON           reduce using rule 21 (expression -> INT .)


state 17

    (20) expression -> LPAREN . expression RPAREN
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 25

state 18

    (22) expression -> ID .

    PLUS            reduce using rule 22 (expression -> ID .)
    MINUS           reduce using rule 22 (expression -> ID .)
    TIMES           reduce using rule 22 (expression -> ID .)
    DIVIDE          reduce using rule 22 (expression -> ID .)
    NEWLINE         reduce using rule 22 (expression -> ID .)
    EQ              reduce using rule 22 (expression -> ID .)
    RPAREN          reduce using rule 22 (expression -> ID .)
    COLON           reduce using rule 22 (expression -> ID .)


state 19

    (10) return_statement -> RETURN expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 10 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 26


state 20

    (19) expression -> MINUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 30

state 21

    (8) compound_statement -> if_statement NEWLINE .

    ID              reduce using rule 8 (compound_statement -> if_statement NEWLINE .)
    RETURN          reduce using rule 8 (compound_statement -> if_statement NEWLINE .)
    IF              reduce using rule 8 (compound_statement -> if_statement NEWLINE .)
    DEDENT          reduce using rule 8 (compound_statement -> if_statement NEWLINE .)
    ENDMARKER       reduce using rule 8 (compound_statement -> if_statement NEWLINE .)


state 22

    (9) assignment -> ID ASSIGN . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 31

state 23

    (14) test -> expression . EQ expression
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    EQ              shift and go to state 32
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 26


state 24

    (11) if_statement -> IF test . COLON suite

    COLON           shift and go to state 33


state 25

    (20) expression -> LPAREN expression . RPAREN
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 34
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 26


state 26

    (18) expression -> expression DIVIDE . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 35

state 27

    (17) expression -> expression TIMES . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 36

state 28

    (15) expression -> expression PLUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 37

state 29

    (16) expression -> expression MINUS . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 38

state 30

    (19) expression -> MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 19 (expression -> MINUS expression .)
    MINUS           reduce using rule 19 (expression -> MINUS expression .)
    TIMES           reduce using rule 19 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 19 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 19 (expression -> MINUS expression .)
    EQ              reduce using rule 19 (expression -> MINUS expression .)
    RPAREN          reduce using rule 19 (expression -> MINUS expression .)
    COLON           reduce using rule 19 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 26 ]


state 31

    (9) assignment -> ID ASSIGN expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    NEWLINE         reduce using rule 9 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 26


state 32

    (14) test -> expression EQ . expression
    (15) expression -> . expression PLUS expression
    (16) expression -> . expression MINUS expression
    (17) expression -> . expression TIMES expression
    (18) expression -> . expression DIVIDE expression
    (19) expression -> . MINUS expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . INT
    (22) expression -> . ID

    MINUS           shift and go to state 20
    LPAREN          shift and go to state 17
    INT             shift and go to state 16
    ID              shift and go to state 18

    expression                     shift and go to state 39

state 33

    (11) if_statement -> IF test COLON . suite
    (12) suite -> . simple_statement
    (13) suite -> . NEWLINE INDENT statement_sequence DEDENT
    (6) simple_statement -> . assignment NEWLINE
    (7) simple_statement -> . return_statement NEWLINE
    (9) assignment -> . ID ASSIGN expression
    (10) return_statement -> . RETURN expression

    NEWLINE         shift and go to state 40
    ID              shift and go to state 10
    RETURN          shift and go to state 8

    assignment                     shift and go to state 2
    simple_statement               shift and go to state 41
    return_statement               shift and go to state 6
    suite                          shift and go to state 42

state 34

    (20) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 20 (expression -> LPAREN expression RPAREN .)


state 35

    (18) expression -> expression DIVIDE expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 18 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 18 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 18 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 18 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 18 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 18 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 18 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 18 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 26 ]


state 36

    (17) expression -> expression TIMES expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 17 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 17 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 17 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 17 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 17 (expression -> expression TIMES expression .)
    EQ              reduce using rule 17 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 17 (expression -> expression TIMES expression .)
    COLON           reduce using rule 17 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 26 ]


state 37

    (15) expression -> expression PLUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 15 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 15 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 15 (expression -> expression PLUS expression .)
    EQ              reduce using rule 15 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression PLUS expression .)
    COLON           reduce using rule 15 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 26

  ! TIMES           [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]


state 38

    (16) expression -> expression MINUS expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 16 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 16 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 16 (expression -> expression MINUS expression .)
    EQ              reduce using rule 16 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 16 (expression -> expression MINUS expression .)
    COLON           reduce using rule 16 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 26

  ! TIMES           [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]


state 39

    (14) test -> expression EQ expression .
    (15) expression -> expression . PLUS expression
    (16) expression -> expression . MINUS expression
    (17) expression -> expression . TIMES expression
    (18) expression -> expression . DIVIDE expression

    COLON           reduce using rule 14 (test -> expression EQ expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 27
    DIVIDE          shift and go to state 26


state 40

    (13) suite -> NEWLINE . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 43


state 41

    (12) suite -> simple_statement .

    NEWLINE         reduce using rule 12 (suite -> simple_statement .)


state 42

    (11) if_statement -> IF test COLON suite .

    NEWLINE         reduce using rule 11 (if_statement -> IF test COLON suite .)


state 43

    (13) suite -> NEWLINE INDENT . statement_sequence DEDENT
    (2) statement_sequence -> . statement statement_sequence
    (3) statement_sequence -> . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . assignment NEWLINE
    (7) simple_statement -> . return_statement NEWLINE
    (8) compound_statement -> . if_statement NEWLINE
    (9) assignment -> . ID ASSIGN expression
    (10) return_statement -> . RETURN expression
    (11) if_statement -> . IF test COLON suite

    ID              shift and go to state 10
    RETURN          shift and go to state 8
    IF              shift and go to state 11

    compound_statement             shift and go to state 1
    assignment                     shift and go to state 2
    simple_statement               shift and go to state 4
    statement_sequence             shift and go to state 44
    return_statement               shift and go to state 6
    statement                      shift and go to state 7
    if_statement                   shift and go to state 9

state 44

    (13) suite -> NEWLINE INDENT statement_sequence . DEDENT

    DEDENT          shift and go to state 45


state 45

    (13) suite -> NEWLINE INDENT statement_sequence DEDENT .

    NEWLINE         reduce using rule 13 (suite -> NEWLINE INDENT statement_sequence DEDENT .)

