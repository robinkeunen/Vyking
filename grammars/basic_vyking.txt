(* language components *)
file_input = {NEWLINE | statement}, ENDMARKER

keyword = 'return' | 'defun' 
        | 'and' | 'or' | 'not'
        | 'if' | 'elif' | 'else'
        | 'while'
        
statement = (funcall
                    | if_stat
                    | while_stat
                    | let_stat
                    | return_stat
                    | funcdef_stat
                    ), NEWLINE;
     
funcall = id, '(', [args], ')';
fundef = 'defun', id, parameters, ':', block;
if_stat = 'if', test, ':', block, {'elif' test ':' block}, ['else' ':' block];
while_stat = 'while', test, ':', block;
for_stat = 'for', id, 'in', list, ':', block;
let_stat = id, '=', (object | exp);
return_stat = 'return', (exp | list);

exp = add_exp;
add_exp = mul_exp, {('+' | '-'), mul_exp};
mul_exp = atom {('*' | '/' | '%'), atom}
atom = id | int | float | 'None' | bool | funcall;

block = statement | NEWLINE INDENT statement {statement} DEDENT;
test = xor_test
xor_test = or_test, {'|', or_test};
or_test = and_test, {'or', and_test};
and_test = not_test {'and', not_test};
not_test = 'not' not_test | identity | atom;
identity = comparison, ['==', atom]
comparison = exp, [comp_op, exp];

parameters = '(', [ids], ')';
ids = id, ',', ids | id;
args = arg, ',', args | arg;
arg = id | funcall | exp;

(* base types *)
int = [(+|-)], digit_0, {digit} | '0';
float = int, '.', [digit, {digit}] [exponent];
exponent = ('e' | 'E'), int;
char = (letter | digit | ' ');
esc_char = '\', letter;
bool = 'True' | 'False';

(* complex types *)
string = '"', {char | esc_char |"'" }, '"' | "'", {char | '"'}, "'";

object = int | float | char | bool | string | id;

(* base cases *)
id = (letter | '_'), { letter | digit | '_'} -keyword;
letter = uppercase | lowercase;
uppercase = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'
          | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'
          | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'
          | 'V' | 'W' | 'X' | 'Y' | 'Z' ;
lowercase = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'
          | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
          | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u'
          | 'v' | 'w' | 'x' | 'y' | 'z' ;
digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7'
      | '8' | '9';
digit_0 = '1' | '2' | '3' | '4' | '5' | '6' | '7' | 
        | '8' | '9';
tab = '    ' | '\t';
comp_op = '==' | '<' | '>' | '<=' | '>=' | '!=';
NEWLINE = '\n';

